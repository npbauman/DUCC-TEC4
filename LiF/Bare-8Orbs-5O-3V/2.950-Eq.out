
ExaChem Git Information
{
 Branch: main
 Commit Hash: d33902b [d33902b3c81cee5138657f8934cce926b1fb7fe6]
 Commit Date: 2025-09-30 12:01:56 -0700
 Commit Message: [cholesky] make IO optional

 WARNING: The following ExaChem sources have uncommitted changes at build-time.

 M exachem/cc/ducc/ducc-t_ccsd.hpp
 M exachem/cc/ducc/qflow-t_ccsd.cpp
 M exachem/cc/scripts/hamiltonian_extractor/fci_solver.py
 M exachem/cc/scripts/hamiltonian_extractor/grab_data.py

diff --git a/exachem/cc/ducc/ducc-t_ccsd.hpp b/exachem/cc/ducc/ducc-t_ccsd.hpp
index 9c93f85..8f0f448 100644
--- a/exachem/cc/ducc/ducc-t_ccsd.hpp
+++ b/exachem/cc/ducc/ducc-t_ccsd.hpp
@@ -31,2 +31 @@ template<typename T>
-std::pair<double, std::vector<std::pair<std::vector<int>, double>>>
-DUCC_T_QFLOW_Driver(Scheduler& sch, ChemEnv& chem_env, const TiledIndexSpace& MO,
+void DUCC_T_QFLOW_Driver(Scheduler& sch, ChemEnv& chem_env, const TiledIndexSpace& MO,
diff --git a/exachem/cc/ducc/qflow-t_ccsd.cpp b/exachem/cc/ducc/qflow-t_ccsd.cpp
index af056e1..15388eb 100644
--- a/exachem/cc/ducc/qflow-t_ccsd.cpp
+++ b/exachem/cc/ducc/qflow-t_ccsd.cpp
@@ -250 +250 @@ void ducc_qflow_driver(ExecutionContext& ec, ChemEnv& chem_env) {
-  // TiledIndexSpace&           MO        = chem_env.is_context.MSO;
+  TiledIndexSpace&           MO        = chem_env.is_context.MSO;
@@ -254,2 +254,2 @@ void ducc_qflow_driver(ExecutionContext& ec, ChemEnv& chem_env) {
-  Tensor<T>                  d_t1      = chem_env.cc_context.d_t1_full;
-  Tensor<T>                  d_t2      = chem_env.cc_context.d_t2_full;
+  // Tensor<T>                  d_t1      = chem_env.cc_context.d_t1_full;
+  // Tensor<T>                  d_t2      = chem_env.cc_context.d_t2_full;
@@ -265,2 +265,2 @@ void ducc_qflow_driver(ExecutionContext& ec, ChemEnv& chem_env) {
-  // const TiledIndexSpace& O = MO_AS("occ");
-  // const TiledIndexSpace& V = MO_AS("virt");
+  const TiledIndexSpace& O = MO("occ");
+  const TiledIndexSpace& V = MO("virt");
@@ -268,4 +268,4 @@ void ducc_qflow_driver(ExecutionContext& ec, ChemEnv& chem_env) {
-  // Tensor<T> cholVpr_UT = {{N, N, CI}, {SpinPosition::upper, SpinPosition::lower,
-  // SpinPosition::ignore}}; sch.allocate(cholVpr_UT).execute(); retile_tamm_tensor(cholVpr,
-  // cholVpr_UT); cholesky_2e::V2Tensors<T>& v2tensors_UT = cholesky_2e::setupV2Tensors<T>(ec,
-  // cholVpr_UT, ex_hw); free_tensors(cholVpr, cholVpr_UT);
+  // Tensor<T> cholVpr_sub = {{N, N, CI}, {SpinPosition::upper, SpinPosition::lower,
+  // SpinPosition::ignore}}; sch.allocate(cholVpr_sub).execute(); retile_tamm_tensor(cholVpr,
+  // cholVpr_sub); cholesky_2e::V2Tensors<T>& v2tensors_sub = cholesky_2e::setupV2Tensors<T>(ec,
+  // cholVpr_sub, ex_hw); free_tensors(cholVpr, cholVpr_sub);
@@ -273,3 +273,3 @@ void ducc_qflow_driver(ExecutionContext& ec, ChemEnv& chem_env) {
-  // Tensor<T> dt1_full_ut = Tensor<T>{{V, O}, {1, 1}};
-  // Tensor<T> dt2_full_ut = Tensor<T>{{V, V, O, O}, {2, 2}};
-  // sch.allocate(dt1_full_ut, dt2_full_ut).execute();
+  // Global amplitudes are transformed to dense tensors so they can addresses
+  ExecutionContext ec_dense{ec.pg(), DistributionKind::dense,
+                            MemoryManagerKind::ga};
@@ -276,0 +277,8 @@ void ducc_qflow_driver(ExecutionContext& ec, ChemEnv& chem_env) {
+  Tensor<T> dt1 = Tensor<T>{{V, O}, {1, 1}};
+  Tensor<T> dt2 = Tensor<T>{{V, V, O, O}, {2, 2}};
+  sch.allocate(dt1, dt2).execute();
+
+  Tensor<T> dt1_global = to_dense_tensor(ec_dense, dt1);
+  Tensor<T> dt2_global = to_dense_tensor(ec_dense, dt2);
+
+  free_tensors(dt1, dt2);
@@ -315,2 +323,2 @@ void ducc_qflow_driver(ExecutionContext& ec, ChemEnv& chem_env) {
-  // Combine occ_combinations and occ_combinations in all ways
-  // The are combined with the sum of orbtital energies
+  // Combine occ_combinations and virt_combinations in all ways
+  // They are combined with the sum of orbital energies
@@ -410 +418 @@ void ducc_qflow_driver(ExecutionContext& ec, ChemEnv& chem_env) {
-      Tensor<T> cholVpr_UT{{N, N, CI},
+      Tensor<T> cholVpr_sub{{N, N, CI},
@@ -412,5 +420,5 @@ void ducc_qflow_driver(ExecutionContext& ec, ChemEnv& chem_env) {
-      sch.allocate(cholVpr_UT).execute();
-      retile_tamm_tensor(cholVpr, cholVpr_UT);
-      cholesky_2e::V2Tensors<T> v2tensors_UT =
-        cholesky_2e::setupV2Tensors<T>(ec, cholVpr_UT, ex_hw);
-      free_tensors(cholVpr_UT);
+      sch.allocate(cholVpr_sub).execute();
+      retile_tamm_tensor(cholVpr, cholVpr_sub);
+      cholesky_2e::V2Tensors<T> v2tensors_sub =
+        cholesky_2e::setupV2Tensors<T>(ec, cholVpr_sub, ex_hw);
+      free_tensors(cholVpr_sub);
@@ -418,3 +426,3 @@ void ducc_qflow_driver(ExecutionContext& ec, ChemEnv& chem_env) {
-      Tensor<T> dt1_full_ut = Tensor<T>{{V, O}, {1, 1}};
-      Tensor<T> dt2_full_ut = Tensor<T>{{V, V, O, O}, {2, 2}};
-      sch.allocate(dt1_full_ut, dt2_full_ut).execute();
+      Tensor<T> dt1_sub = Tensor<T>{{V, O}, {1, 1}};
+      Tensor<T> dt2_sub = Tensor<T>{{V, V, O, O}, {2, 2}};
+      sch.allocate(dt1_sub, dt2_sub).execute();
@@ -423 +431,3 @@ void ducc_qflow_driver(ExecutionContext& ec, ChemEnv& chem_env) {
-      sch(dt1_full_ut() = 0.0)(dt2_full_ut() = 0.0).execute(ex_hw);
+      from_dense_tensor(dt1_global, dt1_sub);
+      from_dense_tensor(dt2_global, dt2_sub);
+      // sch(dt1_sub() = 0.0)(dt2_sub() = 0.0).execute(ex_hw);
@@ -425,3 +435,3 @@ void ducc_qflow_driver(ExecutionContext& ec, ChemEnv& chem_env) {
-      Tensor<T> d_f1_UT = Tensor<T>{{N, N}, {1, 1}};
-      sch.allocate(d_f1_UT).execute();
-      retile_tamm_tensor(d_f1, d_f1_UT);
+      Tensor<T> d_f1_sub = Tensor<T>{{N, N}, {1, 1}};
+      sch.allocate(d_f1_sub).execute();
+      retile_tamm_tensor(d_f1, d_f1_sub);
@@ -430 +440 @@ void ducc_qflow_driver(ExecutionContext& ec, ChemEnv& chem_env) {
-      DUCC_T_CCSD_Driver<T>(chem_env, ec, MO_AS, dt1_full_ut, dt2_full_ut, d_f1_UT, v2tensors_UT,
+      DUCC_T_CCSD_Driver<T>(chem_env, ec, MO_AS, dt1_sub, dt2_sub, d_f1_sub, v2tensors_sub,
@@ -433 +443,23 @@ void ducc_qflow_driver(ExecutionContext& ec, ChemEnv& chem_env) {
-      free_tensors(d_f1_UT, dt1_full_ut, dt2_full_ut);
+      // // Get QFlow results
+      // auto& qflow_results = chem_env.sys_data.results["output"]["QFlow"]["results"];
+
+      // // Get XACC ordering
+      // auto xacc_order = qflow_results["xacc_order"].get<std::vector<int>>();
+      // std::cout << "XACC Ordering: ";
+      // for(const auto& idx : xacc_order) {
+      //     std::cout << idx << " ";
+      // }
+      // std::cout << std::endl;
+
+      // // Get amplitudes 
+      // std::cout << "QFlow Amplitudes:" << std::endl;
+      // for(const auto& amp : qflow_results["amplitudes"]) {
+      //     std::cout << "  [";
+      //     for(size_t i = 0; i < amp["indices"].size(); ++i) {
+      //         std::cout << amp["indices"][i];
+      //         if(i < amp["indices"].size() - 1) std::cout << ", ";
+      //     }
+      //     std::cout << "] -> " << amp["value"].get<double>() << std::endl;
+      // }
+      
+      free_tensors(d_f1_sub, dt1_sub, dt2_sub);
@@ -438 +470,3 @@ void ducc_qflow_driver(ExecutionContext& ec, ChemEnv& chem_env) {
-  free_tensors(cholVpr, d_t1, d_t2, d_f1);
+  // free_tensors(cholVpr, d_t1, d_t2, d_f1);
+  free_tensors(cholVpr, d_f1);
+  Tensor<T>::deallocate(dt1_global, dt2_global);
@@ -446,7 +480,6 @@ template<typename T>
-std::pair<double, std::vector<std::pair<std::vector<int>, double>>>
-DUCC_T_QFLOW_Driver(Scheduler& sch, ChemEnv& chem_env, const TiledIndexSpace& MO,
-                    const Tensor<T>& ftij, const Tensor<T>& ftia, const Tensor<T>& ftab,
-                    const Tensor<T>& vtijkl, const Tensor<T>& vtijka, const Tensor<T>& vtaijb,
-                    const Tensor<T>& vtijab, const Tensor<T>& vtiabc, const Tensor<T>& vtabcd,
-                    ExecutionHW ex_hw, T shift, IndexVector& occ_int_vec, IndexVector& virt_int_vec,
-                    string& pos_str) {
+void DUCC_T_QFLOW_Driver(Scheduler& sch, ChemEnv& chem_env, const TiledIndexSpace& MO,
+                          const Tensor<T>& ftij, const Tensor<T>& ftia, const Tensor<T>& ftab,
+                          const Tensor<T>& vtijkl, const Tensor<T>& vtijka, const Tensor<T>& vtaijb,
+                          const Tensor<T>& vtijab, const Tensor<T>& vtiabc, const Tensor<T>& vtabcd,
+                          ExecutionHW ex_hw, T shift, IndexVector& occ_int_vec, IndexVector& virt_int_vec,
+                          string& pos_str) {
@@ -457,0 +491 @@ DUCC_T_QFLOW_Driver(Scheduler& sch, ChemEnv& chem_env, const TiledIndexSpace& MO
+  SystemData& sys_data = chem_env.sys_data;
@@ -828 +862 @@ DUCC_T_QFLOW_Driver(Scheduler& sch, ChemEnv& chem_env, const TiledIndexSpace& MO
-    std::cout << std::endl
+    std::cout << std::setprecision(6) << std::endl
@@ -834 +868,20 @@ DUCC_T_QFLOW_Driver(Scheduler& sch, ChemEnv& chem_env, const TiledIndexSpace& MO
-    std::cout << "Final Energy: " << results.first << "" << std::endl;
+    // Store results in sys_data.results for use elsewhere in the code
+    sys_data.results["output"]["QFlow"]["results"]["energy"] = results.first;
+    
+    // Store amplitudes in sys_data.results
+    nlohmann::json amplitudes_json = nlohmann::json::array();
+    for(const auto& pair: results.second) {
+      const std::vector<int>& vec = pair.first;
+      double                  val = pair.second;
+      
+      nlohmann::json amp_entry;
+      amp_entry["indices"] = vec;
+      amp_entry["value"] = val;
+      amplitudes_json.push_back(amp_entry);
+    }
+    sys_data.results["output"]["QFlow"]["results"]["amplitudes"] = amplitudes_json;
+
+    // Store XACC_order in sys_data.results
+    sys_data.results["output"]["QFlow"]["results"]["xacc_order"] = XACC_order;
+
+    std::cout << std::setprecision(10) << "Final Energy: " << results.first << "" << std::endl;
@@ -853 +905,0 @@ DUCC_T_QFLOW_Driver(Scheduler& sch, ChemEnv& chem_env, const TiledIndexSpace& MO
-  return results;
@@ -857,7 +909,6 @@ using T = double;
-template std::pair<double, std::vector<std::pair<std::vector<int>, double>>>
-DUCC_T_QFLOW_Driver<T>(Scheduler& sch, ChemEnv& chem_env, const TiledIndexSpace& MO,
-                       const Tensor<T>& ftij, const Tensor<T>& ftia, const Tensor<T>& ftab,
-                       const Tensor<T>& vtijkl, const Tensor<T>& vtijka, const Tensor<T>& vtaijb,
-                       const Tensor<T>& vtijab, const Tensor<T>& vtiabc, const Tensor<T>& vtabcd,
-                       ExecutionHW ex_hw, T shift, IndexVector& occ_int_vec,
-                       IndexVector& virt_int_vec, string& pos_str);
+template void DUCC_T_QFLOW_Driver<T>(Scheduler& sch, ChemEnv& chem_env, const TiledIndexSpace& MO,
+                                      const Tensor<T>& ftij, const Tensor<T>& ftia, const Tensor<T>& ftab,
+                                      const Tensor<T>& vtijkl, const Tensor<T>& vtijka, const Tensor<T>& vtaijb,
+                                      const Tensor<T>& vtijab, const Tensor<T>& vtiabc, const Tensor<T>& vtabcd,
+                                      ExecutionHW ex_hw, T shift, IndexVector& occ_int_vec,
+                                      IndexVector& virt_int_vec, string& pos_str);
diff --git a/exachem/cc/scripts/hamiltonian_extractor/fci_solver.py b/exachem/cc/scripts/hamiltonian_extractor/fci_solver.py
index 75711ad..cfa11ab 100644
--- a/exachem/cc/scripts/hamiltonian_extractor/fci_solver.py
+++ b/exachem/cc/scripts/hamiltonian_extractor/fci_solver.py
@@ -4 +3,0 @@ Full Configuration Interaction (FCI) solver implementation.
-from pyscf import fci
@@ -20 +19,5 @@ def parse_fci_vector(ci_vecmat: np.ndarray, orbs: int, electrons: int, threshold
-    from pyscf.fci import cistring
+    try:
+        from pyscf.fci import cistring
+    except ImportError:
+        raise ImportError("PySCF is required for parsing FCI vectors. Please install it using 'pip install pyscf'.")
+    
@@ -61,0 +65,6 @@ def solve_fci(data, n_roots: int = 1, threshold: float = 0.001, max_space: int =
+    # Import pyscf only when needed
+    try:
+        from pyscf import fci
+    except ImportError:
+        raise ImportError("PySCF is required for FCI calculations. Please install it using 'pip install pyscf'.")
+    
diff --git a/exachem/cc/scripts/hamiltonian_extractor/grab_data.py b/exachem/cc/scripts/hamiltonian_extractor/grab_data.py
index 2a04b34..8d47e3f 100644
--- a/exachem/cc/scripts/hamiltonian_extractor/grab_data.py
+++ b/exachem/cc/scripts/hamiltonian_extractor/grab_data.py
@@ -83,2 +83,2 @@ def _extract_output_data(output_file, data):
-                elif ln_segments[:3] == ['Bare', 'SCF', 'Energy:']:
-                    bare_scf = float(ln_segments[3])
+                elif ln_segments[:5] == ['Bare', 'Active', 'Space', 'SCF', 'Energy:']:
+                    bare_scf = float(ln_segments[5])

}


TAMM Git Information
{
 Branch: main
 Commit Hash: c00148cb [c00148cb8eb9a282939c6227de5f4631680c5370]
 Commit Date: 2025-09-30 12:38:26 -0700
 Commit Message: utility routine to copy dense tensors
}


date: Wed Oct  1 10:55:47 2025
program: "/hpc/home/baum612/code/exachem-dev/build/methods_stage/hpc/home/baum612/code/tamm_install/methods/ExaChem"
nnodes: 1, nproc_per_node: 8, nproc_total: 8, 
Memory information
{
[Intel(R) Xeon(R) Platinum 8276M CPU @ 2.20GHz] : 
  CPU memory per node (GiB): 6046
  Total CPU memory (GiB): 6046
}

------------------------------------------------------------

Input file provided: /hpc/home/baum612/TESTS/TEC4/DUCC-TEC4/LiF/2.950-Eq.json

{
  "geometry": {
    "coordinates": [
      "Li  0 0 0",
      "F  0  0.0  4.613505"
    ],
    "units": "angstrom"
  },
  "common": {
    "maxiter": 200
  },
  "basis": {
    "basisset": "cc-pVTZ"
  },
  "SCF": {
    "tol_int": 1e-18,
    "tol_sch": 1e-12,
    "tol_lindep": 1e-05,
    "conve": 1e-08,
    "convd": 1e-07,
    "scf_type": "restricted"
  },
  "CD": {
    "debug": false,
    "diagtol": 1e-09
  },
  "CC": {
    "threshold": 1e-08,
    "ccsd_maxiter": 150,
    "nactive_oa": 5,
    "nactive_ob": 5,
    "nactive_va": 3,
    "nactive_vb": 3,
    "PRINT": {},
    "ducc_lvl": 0
  },
  "TASK": {
    "ducc": [
      true,
      "default"
    ]
  }
}

Output folder & files prefix: 2.950-Eq.cc-pvtz

  Li (lithium)
  ------------
          Exponent        Coefficients
      ----------------  --------------------
  1 S  5.98800000E+03      0.064619
  1 S  8.98900000E+02      0.120104
  1 S  2.05900000E+02      0.204535
  1 S  5.92400000E+01      0.318977
  1 S  1.98700000E+01      0.445628
  1 S  7.40600000E+00      0.531197
  1 S  2.93000000E+00      0.503573
  1 S  1.18900000E+00      0.319820
  1 S  4.79800000E-01      0.078538

  2 S  5.98800000E+03     -0.037675
  2 S  8.98900000E+02     -0.069659
  2 S  2.05900000E+02     -0.117469
  2 S  5.92400000E+01     -0.187176
  2 S  1.98700000E+01     -0.260910
  2 S  7.40600000E+00     -0.332441
  2 S  2.93000000E+00     -0.330149
  2 S  1.18900000E+00     -0.297802
  2 S  4.79800000E-01     -0.170456

  3 S  7.50900000E-02      0.102234

  4 S  2.83200000E-02      0.049202

  5 P  3.26600000E+00      0.222451
  5 P  6.51100000E-01      0.163232
  5 P  1.69600000E-01      0.134040

  6 P  5.57800000E-02      0.038640

  7 P  2.05000000E-02      0.011057

  8 D  1.87400000E-01      0.087853

  9 D  8.01000000E-02      0.019850

  10 F  1.82900000E-01      0.032206


  F (fluorine)
  ------------
          Exponent        Coefficients
      ----------------  --------------------
  1 S  1.95000000E+04      0.610821
  1 S  2.92300000E+03      1.138598
  1 S  6.64500000E+02      1.930203
  1 S  1.87500000E+02      2.922896
  1 S  6.06200000E+01      3.655092
  1 S  2.14200000E+01      3.146693
  1 S  7.95000000E+00      1.209704
  1 S  8.81500000E-01     -0.005242

  2 S  1.95000000E+04     -0.234735
  2 S  2.92300000E+03     -0.440790
  2 S  6.64500000E+02     -0.750590
  2 S  1.87500000E+02     -1.175794
  2 S  6.06200000E+01     -1.575703
  2 S  2.14200000E+01     -1.694881
  2 S  7.95000000E+00     -1.017604
  2 S  8.81500000E-01      0.669219

  3 S  2.25700000E+00      1.312377

  4 S  3.04100000E-01      0.291859

  5 P  4.38800000E+01      6.745828
  5 P  9.92600000E+00      6.597273
  5 P  2.93000000E+00      4.359097

  6 P  9.13200000E-01      1.272470

  7 P  2.67200000E-01      0.273833

  8 D  3.10700000E+00     11.967589

  9 D  8.55000000E-01      1.251267

  10 F  1.91700000E+00      6.365818



Printing Internal Coordinates

------------------------------------------------------------
                Bond Lengths

i      j        Length (Angstroms)     Length (Bohr)
0      1          4.6135050000         8.7182609305

Number of Angles: 0
Number of Torsional Angles: 0


----------------------------------------------------------------------
                          Center of Mass

         x               y               z              Unit
               0               0     3.369257542      Angstrom
               0               0     6.366974001          Bohr

----------------------------------------------------------------------
                Moment of Inertia Tensor

           389.451                 0                 0
                 0           389.451                 0
                 0                 0                 0

----------------------------------------------------------------------
                      Principal Moments of Inertia

           x                 y                 z                Unit
                 0        109.057311        109.057311       amu * ang^2
                 0       389.4507278       389.4507278      amu * bohr^2
  0.0000000000e+00  1.8109404900e-38  1.8109404900e-38          g * cm^2

 - Molecule is diatomic.

----------------------------------------------------------------------

         Rotational constants (MHz)

    A = inf        B = 4.6341e+03        C = 4.6341e+03

----------------------------------------------------------------------

        Rotational constants (cm-1)

    A = inf        B = 1.5458e-01        C = 1.5458e-01

----------------------------------------------------------------------

                                Z-Matrix
Li  
F        1       8.7182609

----------------------------------------------------------------------

             Converted back to Cartesian

Li       0.000000      0.000000      0.000000
F        0.000000      0.000000      8.718261

----------------------------------------------------------------------
                       Geometry in bohr 

1     Li      0.0000000000    0.0000000000    0.0000000000
2     F       0.0000000000    0.0000000000    8.7182609305

 Number of nodes, processes per node used for SCF calculation: 1, 8

Common Options
{
  maxiter       = 200
  basis         = cc-pvtz spherical
  geom_units    = angstrom
  ang2au factor = 1.889726126
  debug         = false
  file_prefix   = 2.950-Eq
}

SCF Options
{
  charge            = 0
  multiplicity      = 1
  level shift       = 0
  tol_int           = 1e-18
  tol_sch           = 1e-12
  tol_lindep        = 1e-05
  conve             = 1e-08
  convd             = 1e-07
  diis_hist         = 10
  AO_tilesize       = 30
  writem            = 1
  damp              = 100
  n_lindep          = 0
  scf_type          = restricted
  cuscf             = false
  direct_df         = false
  restart_size      = 2000
  restart           = false
  debug             = false
}

Number of basis functions = 60

Total number of shells = 20

Total number of electrons = 12
  # of alpha electrons    = 6
  # of beta electons      = 6

Nuclear repulsion energy  = 3.09694791372026

# of {all,non-negligible} shell-pairs = {210,210}
Number of AO tiles = 20

Time for initial setup: 0.01 secs
HF exch = 1.00

Time for computing 1-e integrals T, V, S: 0.00 secs
Time for computing orthogonalizer: 0.00 secs

Superposition of Atomic Density Guess ...
Time taken for SAD: 0.33 secs
Total Time to compute initial guess: 0.33 secs


 SCF iterations
-----------------------------------------------------------------------------
 Iter     Energy            E-Diff       RMSD        |[F,P]|^2       Time(s)
-----------------------------------------------------------------------------
   1  -106.4353918696    -1.06e+02     1.32e-02     4.65e-02         0.0 
   2  -106.6854120757    -2.50e-01     2.45e-04     1.64e+00         0.1 
   3  -106.6927827038    -7.37e-03     3.86e-03     1.50e+00         0.0 
   4  -106.7654651921    -7.27e-02     2.71e-03     2.51e-01         0.0 
   5  -106.7809709331    -1.55e-02     1.05e-03     8.15e-03         0.0 
   6  -106.7818565482    -8.86e-04     3.99e-04     2.99e-04         0.0 
   7  -106.7819320292    -7.55e-05     1.77e-04     5.08e-05         0.1 
   8  -106.7819416598    -9.63e-06     2.53e-05     6.45e-07         0.1 
   9  -106.7819418978    -2.38e-07     1.33e-05     1.30e-07         0.1 
  10  -106.7819419401    -4.22e-08     1.10e-06     8.08e-10         0.1 
  11  -106.7819419404    -2.95e-10     3.03e-07     3.32e-10         0.1 
  12  -106.7819419404    -3.78e-11     4.70e-08     1.75e-12         0.1 

** Total SCF energy = -106.7819419404179

Nuclear repulsion energy = 3.096947913720263
#electrons        = 12
1e energy kinetic = 106.8388119541906178
1e energy N-e     = -265.5633476180495336
1e energy         = -158.7245356638589158
2e energy         = 48.8456458097207786
writing orbitals and density to disk ... done.

Total Time taken for Hartree-Fock: 1.47 secs

CD Options
{
  debug             = false
  skip_cd           = [false, 100]
  write_cv          = [false, 5000]
  diagtol           = 1e-09
  itilesize         = 1000
  max_cvecs_factor  = 12
}

- #occupied, #virtual = 12, 108

- Tilesize for the MSO space: 40

-----------------------------------------------------
Begin 2-index transformation ... 

nAO, nMO, nelectrons = 60, 120, 12
n_occ_alpha, n_vir_alpha, n_occ_beta, n_vir_beta = 6,54,6,54

Time taken for Fao->Fmo transform: 0.00 secs

-----------------------------------------------------
Number of AO tiles = 20
# of {all,non-negligible} shell-pairs = {210,210}

    Begin Cholesky Decomposition
---------------------------------------------
Total # of mpi ranks used for Cholesky decomposition: 8
  --> Number of nodes, mpi ranks per node: 1, 8
- CPU memory required for computing cholesky vectors: 0.06 GiB

- Time for computing the diagonal: 0.01 secs

- Total number of cholesky vectors = 607

- Time to compute cholesky vectors: 1.48 secs

- CPU memory required for resizing the ao cholesky tensor: 0.05 GiB
- CPU memory required for ao2mo transformation: 0.05 GiB
- CPU memory required for the 2-step contraction: 0.07 GiB

- Time for ao to mo transform: 0.34 secs

   End Cholesky Decomposition
---------------------------------------------

Total Time taken for Cholesky Decomposition: 2.02 secs

scf_type = restricted
Closed-Shell SCF
nbf = 60
nbf_orig = 60
n_lindep = 0
focc = 1
nmo = 120
nocc = 12
nvir = 108
n_occ_alpha = 6
n_vir_alpha = 54
n_occ_beta = 6
n_vir_beta = 54
nelectrons = 12
nelectrons_alpha = 6
nelectrons_beta = 6
n_frozen_core = 0
n_frozen_virtual = 0
----------------------------

Total CPU memory required for Closed Shell Cholesky CCSD calculation: 0.11 GiB


 CCSD iterations
------------------------------------------------------------
  Iter     Residuum          Correlation          Time(s)
------------------------------------------------------------
   1     0.7392363059738    0.0000000000000         0.90
   2     0.0695697120938   -0.2978240403983         0.95
   3     0.0364793880800   -0.2904939169883         0.85
   4     0.0427986170741   -0.2985427500825         0.83
   5     0.0947215952329   -0.2946753882554         0.96
 MICROCYCLE DIIS UPDATE:                    6
   6     0.0074154691843   -0.2969056603024         0.91
   7     0.0135594517228   -0.2969679902096         0.82
   8     0.0170772497480   -0.2980124647865         0.90
   9     0.0402147717638   -0.2971375322859         1.29
  10     0.0918535291394   -0.2988728061144         1.33
 MICROCYCLE DIIS UPDATE:                   11
  11     0.0045898440323   -0.2981896731315         1.41
  12     0.0063054641543   -0.2980510368989         1.32
  13     0.0049187622698   -0.2984000176431         1.71
  14     0.0081773166132   -0.2981644699753         1.54
  15     0.0101146937028   -0.2986874158927         1.42
 MICROCYCLE DIIS UPDATE:                   16
  16     0.0055397654255   -0.2990348313453         1.48
  17     0.0104765627730   -0.2992118444513         1.51
  18     0.0273250888046   -0.2989467220508         1.49
  19     0.0698658753787   -0.2997439486066         1.43
  20     0.1872038973018   -0.2979717504378         1.49
 MICROCYCLE DIIS UPDATE:                   21
  21     0.0012628006471   -0.2992425507520         1.51
  22     0.0018731842845   -0.2992419807102         1.54
  23     0.0029791632397   -0.2992783827471         1.61
  24     0.0075466270961   -0.2992378149208         1.76
  25     0.0177715514358   -0.2993839351897         1.92
 MICROCYCLE DIIS UPDATE:                   26
  26     0.0005936939124   -0.2993787019015         1.60
  27     0.0006423457023   -0.2994055953025         1.42
  28     0.0012965048164   -0.2994115129829         1.21
  29     0.0026393861431   -0.2994474816877         1.12
  30     0.0063947938787   -0.2993883967330         1.31
 MICROCYCLE DIIS UPDATE:                   31
  31     0.0002008487561   -0.2994635048874         1.45
  32     0.0002652511955   -0.2994557849908         0.97
  33     0.0003359556064   -0.2994618552868         1.09
  34     0.0007859385490   -0.2994544261778         1.14
  35     0.0016730816854   -0.2994765972216         1.08
 MICROCYCLE DIIS UPDATE:                   36
  36     0.0001113307520   -0.2994693940289         0.90
  37     0.0001742447902   -0.2994715139755         0.98
  38     0.0002948756433   -0.2994764435886         1.12
  39     0.0007382190843   -0.2994744645577         0.89
  40     0.0017705355417   -0.2994845496965         0.96
 MICROCYCLE DIIS UPDATE:                   41
  41     0.0000545677150   -0.2994880132973         0.90
  42     0.0000728529912   -0.2994860583082         0.85
  43     0.0001327575642   -0.2994872520429         1.10
  44     0.0003754935927   -0.2994853584257         0.86
  45     0.0010189656291   -0.2994912351530         0.93
 MICROCYCLE DIIS UPDATE:                   46
  46     0.0000317625373   -0.2994873360903         0.86
  47     0.0000338933172   -0.2994884588629         0.90
  48     0.0000530334796   -0.2994894250811         0.82
  49     0.0001294729941   -0.2994898497349         0.92
  50     0.0003480719307   -0.2994904622735         0.89
 MICROCYCLE DIIS UPDATE:                   51
  51     0.0000142264066   -0.2994929655381         1.90
  52     0.0000232950244   -0.2994924299024         2.98
  53     0.0000381924757   -0.2994929995715         2.43
  54     0.0000975883384   -0.2994920747523         2.47
  55     0.0002309784340   -0.2994945795978         2.35
 MICROCYCLE DIIS UPDATE:                   56
  56     0.0000082499304   -0.2994929443498         2.67
  57     0.0000107726153   -0.2994931947609         2.68
  58     0.0000168868839   -0.2994935677237         2.19
  59     0.0000476652954   -0.2994934294836         2.23
  60     0.0001280766002   -0.2994942110495         3.08
 MICROCYCLE DIIS UPDATE:                   61
  61     0.0000044373463   -0.2994944147169         2.19
  62     0.0000046870705   -0.2994942921204         2.14
  63     0.0000078357937   -0.2994943199284         2.28
  64     0.0000196070053   -0.2994943376574         2.08
  65     0.0000529595824   -0.2994944046139         1.82
 MICROCYCLE DIIS UPDATE:                   66
  66     0.0000021431844   -0.2994944890841         1.85
  67     0.0000037703383   -0.2994945236350         1.80
  68     0.0000065648846   -0.2994946521988         1.85
  69     0.0000177417423   -0.2994945303089         2.16
  70     0.0000441896171   -0.2994949335835         2.10
 MICROCYCLE DIIS UPDATE:                   71
  71     0.0000010596141   -0.2994948730241         2.00
  72     0.0000012364515   -0.2994948335702         1.65
  73     0.0000017979426   -0.2994948513893         1.81
  74     0.0000050431713   -0.2994948226301         1.88
  75     0.0000133256846   -0.2994949147651         1.77
 MICROCYCLE DIIS UPDATE:                   76
  76     0.0000006296425   -0.2994948563608         1.67
  77     0.0000007122202   -0.2994948732584         1.85
  78     0.0000011004041   -0.2994948930233         1.97
  79     0.0000028360060   -0.2994948975147         1.74
  80     0.0000076822214   -0.2994949190012         1.48
 MICROCYCLE DIIS UPDATE:                   81
  81     0.0000002579525   -0.2994949738042         1.66
  82     0.0000004115527   -0.2994949634033         2.27
  83     0.0000006936637   -0.2994949719958         1.30
  84     0.0000017329711   -0.2994949557034         1.41
  85     0.0000040681484   -0.2994949989394         1.61
 MICROCYCLE DIIS UPDATE:                   86
  86     0.0000001476765   -0.2994949686930         1.67
  87     0.0000001944891   -0.2994949724208         1.59
  88     0.0000003593757   -0.2994949782991         1.61
  89     0.0000011486337   -0.2994949764310         1.65
  90     0.0000037217736   -0.2994949886318         1.48
 MICROCYCLE DIIS UPDATE:                   91
  91     0.0000000742912   -0.2994949963189         1.46
  92     0.0000000757220   -0.2994949935478         1.44
  93     0.0000000904352   -0.2994949943843         1.44
  94     0.0000002067651   -0.2994949931277         1.50
  95     0.0000005136819   -0.2994949971164         2.42
 MICROCYCLE DIIS UPDATE:                   96
  96     0.0000000435629   -0.2994949944173         1.06
  97     0.0000000438940   -0.2994949955506         1.61
  98     0.0000000524942   -0.2994949969028         1.68
  99     0.0000001341047   -0.2994949973150         1.69
 100     0.0000004364552   -0.2994949983378         1.60
 MICROCYCLE DIIS UPDATE:                  101
 101     0.0000000199800   -0.2994950027465         1.51
 102     0.0000000208626   -0.2994950020696         1.45
 103     0.0000000352572   -0.2994950020715         1.38
 104     0.0000000865032   -0.2994950021096         1.54
 105     0.0000002274272   -0.2994950023741         1.55
 MICROCYCLE DIIS UPDATE:                  106
 106     0.0000000114305   -0.2994950020964         1.64
 107     0.0000000110413   -0.2994950024125         1.69
 108     0.0000000148917   -0.2994950026966         2.39
 109     0.0000000377158   -0.2994950029027         1.69
 110     0.0000001239039   -0.2994950029835         1.83
 MICROCYCLE DIIS UPDATE:                  111
 111     0.0000000048218   -0.2994950043412         1.83
------------------------------------------------------------------
 Iterations converged
 CCSD correlation energy / hartree =        -0.299495004341212
 CCSD total energy / hartree       =      -107.081436944759091

Time taken for Closed Shell Cholesky CCSD: 174.59 secs

Executing DUCC routine
======================
Number of active occupied alpha = 5
Number of active occupied beta  = 5
Number of active virtual alpha  = 3
Number of active virtual beta   = 3
ducc_lvl = 0

Full SCF Energy: -106.781941940418
Bare SCF Energy: -106.781941986644
Frozen Core Energy: 0.000000046226

DUCC: Time taken to compute Bare Hamiltonian: 0.00 secs
Bare Active Space SCF Energy: -30.615946866906
Fully Contracted Scalar: 0.000000000000

DUCC: Total compute time: 0.00 secs

DUCC: Time to write results: 0.01 secs
DUCC Memory Stats
-----------------
allocation count: 859
deallocation count: 858
total memory allocated: 0.660553 GiB
total memory deallocated: 0.660552 GiB
maximum memory in single allocation: 0.380116 GiB
maximum memory consumption: 0.470414 GiB
